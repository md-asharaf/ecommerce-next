// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart         Cart?
  orders       Order[]
  couponUsages CouponUsage[]
  addresses    Address[]
  ratings      Rating[]

  @@map("customers")
}

model CouponUsage {
  id         String   @id @default(uuid())
  couponId   String
  customerId String
  usedAt     DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id])

  @@map("coupon_usage")
}

model Order {
  id             String      @id @default(uuid())
  customerId     String
  status         OrderStatus @default(PENDING)
  totalAmount    Float
  discountAmount Float       @default(0)
  finalAmount    Float

  couponId String?
  razorpayOrderId String? @unique

  shippingAddressId String

  shippingCost Float @default(0)
  taxAmount    Float @default(0)

  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer        Customer @relation(fields: [customerId], references: [id])
  shippingAddress Address  @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  payment         Payment?

  @@map("orders")
}

model Item {
  id            String   @id @default(uuid())
  productId     String
  variantId     String?
  quantity      Int      @default(1)
  unitPrice     Float
  originalPrice Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  cart          Cart?    @relation(fields: [cartId], references: [id])
  cartId        String?
  order         Order?   @relation(fields: [orderId], references: [id])
  orderId       String?

  @@map("items")
}

model Address {
  id         String  @id @default(uuid())
  customerId String
  fullName   String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  phone      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders   Order[]  @relation("ShippingAddress")
  customer Customer @relation(fields: [customerId], references: [id])

  @@map("addresses")
}

model Payment {
  id                String        @id @default(uuid())
  orderId           String        @unique
  razorpayOrderId   String        @unique
  razorpayPaymentId String?       @unique
  razorpaySignature String?
  amount            Float
  currency          String        @default("INR")
  method            PaymentMethod @default(UPI)
  status            PaymentStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order  Order   @relation(fields: [orderId], references: [id])
  refund Refund?

  @@map("payments")
}

model Refund {
  id               String   @id @default(uuid())
  paymentId        String   @unique
  razorpayRefundId String
  amount           Float
  reason           String?
  createdAt        DateTime @default(now())
  payment          Payment  @relation(fields: [paymentId], references: [id])

  @@map("refunds")
}

model Rating {
  id         String   @id @default(uuid())
  customerId String
  productId  String
  rating     Int
  review     Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])

  @@map("ratings")
}

model Cart {
  id         String   @id @default(uuid())
  customerId String   @unique
  items      Item[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])

  @@map("carts")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  NET_BANKING
  CASH_ON_DELIVERY
  UPI
}
